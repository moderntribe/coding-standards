<?xml version="1.0"?>
<ruleset name="ModernTribe"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd">

    <description>The Modern Tribe Coding Standard.</description>

    <!-- PSR2 -->
    <rule ref="PSR2">
        <exclude name="Generic.WhiteSpace.DisallowTabIndent"/>
        <exclude name="Generic.Files.LineLength.TooLong"/>
        <exclude name="PSR1.Files.SideEffects.FoundWithSymbols"/>
        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>
        <exclude name="PSR2.Methods.FunctionCallSignature.SpaceAfterOpenBracket"/>
        <exclude name="PSR2.Methods.FunctionCallSignature.SpaceBeforeCloseBracket"/>
        <exclude name="PSR2.Classes.ClassDeclaration.OpenBraceNewLine"/>
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody"/>
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace"/>
        <exclude name="PSR2.ControlStructures.ControlStructureSpacing.SpaceBeforeCloseBrace"/>
        <exclude name="Squiz.Classes.ValidClassName.NotCamelCaps"/>
        <exclude name="Squiz.ControlStructures.ForEachLoopDeclaration.SpaceAfterOpen"/>
        <exclude name="Squiz.ControlStructures.ControlSignature.SpaceAfterCloseBrace"/>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterOpen"/>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingBeforeClose"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.BraceOnSameLine"/>
    </rule>

    <!-- PSR12 -->
    <rule ref="PSR12.Files.DeclareStatement"/>

    <!-- PEAR -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>

    <!-- Function spacing -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="requiredSpacesAfterOpen" value="1"/>
            <property name="requiredSpacesBeforeClose" value="1"/>
        </properties>
        <severity>0</severity>
    </rule>

    <!-- Now that we've excluded all message codes from FunctionCallSignature,
         re-enable the two codes that we actually want. This will change the severity
         of these codes from 0 (set by the above rule) to the default value (5). -->
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket"/>
    <rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket"/>

    <!-- WordPress -->
    <rule ref="WordPress.Arrays.MultipleStatementAlignment.DoubleArrowNotAligned"/>
    <rule ref="WordPress.WhiteSpace.OperatorSpacing"/>
    <rule ref="WordPress.Arrays.ArrayKeySpacingRestrictions"/>
    <rule ref="WordPressVIPMinimum">
        <severity>3</severity>
        <exclude name="WordPressVIPMinimum.Constants.ConstantString.NotCheckingConstantName"/>
        <exclude name="WordPressVIPMinimum.Variables.VariableAnalysis"/>
    </rule>
    <!-- Covers rule: Put spaces on both sides of the opening and closing parenthesis of
       functions, methods, if, elseif, foreach, for, and switch blocks. -->
    <rule ref="WordPress.WhiteSpace.ControlStructureSpacing"/>

    <!-- No short echos allowed. WordPress-VIP-GO overides the default 
        severity.  -->
    <rule ref="Generic.PHP.DisallowShortOpenTag.EchoFound">
        <severity>4</severity>
        <type>warning</type>
    </rule>

    <!-- Generic / Squiz -->
    <rule ref="Generic.Functions.OpeningFunctionBraceKernighanRitchie"/>
    <rule ref="Generic.Classes.OpeningBraceSameLine"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax.Found"/>
    <rule ref="Generic.WhiteSpace.DisallowSpaceIndent"/>
    <rule ref="Generic.Formatting.MultipleStatementAlignment"/>
    <rule ref="Generic.Files.ByteOrderMark"/>
    <rule ref="Generic.Files.EndFileNewline"/>
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="indent" value="4"/>
            <property name="tabIndent" value="true"/>
        </properties>
    </rule>
    <rule ref="Generic.VersionControl.GitMergeConflict"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast">
        <properties>
            <property name="spacing" value="1"/>
        </properties>
    </rule>
    <!-- Force whitespace after `!` -->
    <rule ref="Generic.Formatting.SpaceAfterNot"/>
    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Slevomat class formatting -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <!-- Checks lines count between different class members, eg. between last property and first method -->
    <rule ref="SlevomatCodingStandard.Classes.ClassMemberSpacing"/>
    <!-- Force spacing around a class definition -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces"/>
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing"/>
    <!-- Forbid uses of multiple traits separated by comma -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>
    <rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation"/>
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration"/>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="spacesCountAroundEqualsSign" value="0"/>
            <property name="declareOnFirstLine" value="true"/>
            <property name="linesCountAfterDeclare" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="1"/>
            <property name="linesCountAfterLastUse" value="1"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" value="true"/>
        </properties>
    </rule>
    <!-- Require space around colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing">
        <properties>
            <property name="spacesCountBeforeColon" value="0"/>
        </properties>
    </rule>

    <!-- Slevomat array formatting -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <rule ref="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace">
        <properties>
            <property name="spacesAroundBrackets" value="1"/>
        </properties>
    </rule>

    <!-- Slevomat functions -->
    <rule ref="SlevomatCodingStandard.Functions.StaticClosure"/>
    <rule ref="SlevomatCodingStandard.Functions.RequireSingleLineCall"/>
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>


    <!-- Slevomat comment formatting -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBetweenDifferentAnnotationsTypes" value="1"/>
            <property name="linesCountAfterLastContent" value="0"/>
        </properties>
    </rule>

    <!-- Slevomat control structures -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessIfConditionWithReturn"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.UselessTernaryOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator"/>
    <!-- Require consistent spacing for jump statements -->
    <rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
        <properties>
            <property name="linesCountBeforeWhenFirstInCaseOrDefault" value="0"/>
            <property name="linesCountAfterWhenLastInCaseOrDefault" value="1"/>
            <property name="linesCountAfterWhenLastInLastCaseOrDefault" value="0"/>
            <property name="jumpStatements" type="array">
                <element value="return" />
                <element value="throw" />
                <element value="yield" />
                <element value="yield_from" />
            </property>
        </properties>
    </rule>

    <!-- Slevomat exceptions -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!-- Slevomat generic -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
</ruleset>
